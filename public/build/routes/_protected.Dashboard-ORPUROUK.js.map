{
  "version": 3,
  "sources": ["empty-module:../services/_db.server", "empty-module:../services/weather.server", "../../../app/routes/_protected.Dashboard.tsx", "../../../node_modules/@mui/icons-material/esm/utils/createSvgIcon.js", "../../../node_modules/@mui/icons-material/esm/Delete.js"],
  "sourcesContent": ["module.exports = {};", "module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\_protected.Dashboard.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\_protected.Dashboard.tsx\");\n  import.meta.hot.lastModified = \"1734512522955.9175\";\n}\n// REMIX HMR END\n\n// app/routes/_protected.dashboard.tsx\nimport { useState } from 'react';\nimport { Typography, Container, Grid, TextField, Button, Card, CardContent } from '@mui/material';\nimport { Delete } from '@mui/icons-material';\nimport { useLoaderData, Form } from '@remix-run/react';\nimport { authenticator } from '../services/_auth.server';\nimport { prisma } from '../services/_db.server';\nimport { getWeatherForCity } from '../services/weather.server';\nexport async function loader({\n  request\n}) {\n  const user = await authenticator.isAuthenticated(request, {\n    failureRedirect: \"/login\"\n  });\n  const userData = await prisma.user.findUnique({\n    where: {\n      id: user.id\n    },\n    include: {\n      cities: true\n    }\n  });\n  const weatherData = await Promise.all(userData.cities.map(city => getWeatherForCity(city.name)));\n  return {\n    user,\n    cities: userData.cities,\n    weatherData\n  };\n}\nexport async function action({\n  request\n}) {\n  const user = await authenticator.isAuthenticated(request);\n  const formData = await request.formData();\n  const action = formData.get('_action');\n  const cityName = formData.get('cityName');\n  if (action === 'add' && cityName) {\n    const existingCitiesCount = await prisma.city.count({\n      where: {\n        userId: user.id\n      }\n    });\n    if (existingCitiesCount < 5) {\n      await prisma.city.create({\n        data: {\n          name: cityName,\n          userId: user.id\n        }\n      });\n    }\n  } else if (action === 'delete') {\n    await prisma.city.deleteMany({\n      where: {\n        name: cityName,\n        userId: user.id\n      }\n    });\n  }\n  return null;\n}\nexport default function Dashboard() {\n  _s();\n  const {\n    user,\n    cities,\n    weatherData\n  } = useLoaderData();\n  const [newCity, setNewCity] = useState('');\n  return <Container>\r\n            <Typography variant=\"h4\" sx={{\n      my: 2\n    }}>\r\n                Welcome to the Weather App, {user.username}!\r\n            </Typography>\r\n\r\n            <Form method=\"post\">\r\n                <TextField label=\"Add City\" value={newCity} onChange={e => setNewCity(e.target.value)} variant=\"outlined\" sx={{\n        mr: 2\n      }} />\r\n                <Button type=\"submit\" variant=\"contained\" name=\"_action\" value=\"add\" disabled={cities.length >= 5}>\r\n                    Add City\r\n                </Button>\r\n            </Form>\r\n\r\n            <Grid container spacing={3} sx={{\n      mt: 2\n    }}>\r\n                {weatherData.map((weather, index) => <Grid item xs={12} md={4} key={cities[index].id}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Typography variant=\"h6\">{weather.location.name}</Typography>\r\n                                <Typography>{weather.current.condition.text}</Typography>\r\n                                <img src={weather.current.condition.icon} alt=\"Weather Icon\" />\r\n                                <Typography>Temp: {weather.current.temp_c}\u00B0C</Typography>\r\n                                <Typography>Humidity: {weather.current.humidity}%</Typography>\r\n                                <Typography>Precipitation: {weather.current.precip_mm}mm</Typography>\r\n                                <Form method=\"post\">\r\n                                    <input type=\"hidden\" name=\"cityName\" value={weather.location.name} />\r\n                                    <Button type=\"submit\" name=\"_action\" value=\"delete\" color=\"error\" startIcon={<Delete />}>\r\n                                        Remove\r\n                                    </Button>\r\n                                </Form>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>)}\r\n            </Grid>\r\n        </Container>;\n}\n_s(Dashboard, \"RANhVg1je1LeihVrQISR7lA15as=\", false, function () {\n  return [useLoaderData];\n});\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "'use client';\n\nexport { createSvgIcon as default } from '@mui/material/utils';", "\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');"],
  "mappings": "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",
  "names": ["_jsx"]
}
